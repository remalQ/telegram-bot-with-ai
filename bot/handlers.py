# handlers.py

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import ContextTypes
import logging
from bot.storage import save_user_data
from bot.yagpt_include import ask_yagpt
import requests
import os

logger = logging.getLogger(__name__)
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")


# –ó–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–∫–∞—Ü–∏—é
async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    location = update.message.location
    if not location:
        await update.message.reply_text("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    lat, lon = location.latitude, location.longitude
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&units=metric&lang=ru&appid={OPENWEATHER_API_KEY}"
        resp = requests.get(url).json()

        city = resp.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        temp = resp["main"]["temp"]
        description = resp["weather"][0]["description"].capitalize()

        msg = f"üåç *–ì–æ—Ä–æ–¥:* {city}\nüå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temp}¬∞C\n‚òÅ *–ü–æ–≥–æ–¥–∞:* {description}"
        await update.message.reply_text(msg, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_data = {
        "name": user.first_name,
        "username": user.username,
        "id": user.id,
    }
    save_user_data(user.id, user_data)

    keyboard = [
        [
            InlineKeyboardButton("‚Ñπ –ö–æ–º–∞–Ω–¥—ã", callback_data="show_help"),
            InlineKeyboardButton("üå¶ –ü–æ–≥–æ–¥–∞", callback_data="get_weather"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{user.first_name}*!\n\n"
        "–Ø ‚Äî *—É–º–Ω—ã–π Telegram-–±–æ—Ç*, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å.\n\n"
        "üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    image_url = "templates/start_image.jpg"

    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=image_url,
        caption=welcome_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/help")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "show_help":
        await query.edit_message_caption(
            caption="üìå *–ö–æ–º–∞–Ω–¥—ã:*\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞",
            parse_mode="Markdown"
        )
    elif query.data == "get_weather":
        await query.message.reply_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –ø–æ–≥–æ–¥—ã...")
        await request_location(update, context)


# –ß–∞—Ç —Å YandexGPT
async def yagpt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    if not user_message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")
        return

    answer = await ask_yagpt(user_message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º YandexGPT
    await update.message.reply_text(answer)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
