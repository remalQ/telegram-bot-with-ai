# bot/handlers.py

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes
import logging
from bot.storage import save_user_data

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–≤—Å–µ–≥–¥–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)."""

    user = update.effective_user
    user_data = {
        "name": user.first_name,
        "username": user.username,
        "id": user.id,
    }
    save_user_data(user.id, user_data)

    keyboard = [
        [
            InlineKeyboardButton("‚Ñπ –ö–æ–º–∞–Ω–¥—ã", callback_data="show_help"),
            InlineKeyboardButton("üó® –î–∏–∞–ª–æ–≥", callback_data="start_dialog"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{user.first_name}*!\n\n"
        "–Ø ‚Äî *—É–º–Ω—ã–π Telegram-–±–æ—Ç*, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å.\n\n"
        "üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    image_url = "templates/start_image.jpg"

    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=image_url,
        caption=welcome_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/help\n/conversation")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "show_help":
        await query.edit_message_caption(
            caption="üìå *–ö–æ–º–∞–Ω–¥—ã:*\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/conversation ‚Äî –¥–∏–∞–ª–æ–≥",
            parse_mode="Markdown"
        )
    elif query.data == "start_dialog":
        await query.message.reply_text("‚úç –ó–∞–ø—É—Å—Ç–∏—Ç–µ /conversation –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.")


async def conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üó® –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ò–ò.")